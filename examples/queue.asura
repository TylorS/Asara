import Console from 'std:Console'

effect Queue<A> {
  enqueue(A): Boolean
  dequeue(): Option<A>
  
  is_shutdown(): Boolean
  shutdown(): Boolean
}

impl<A> for Queue<A> {
  fun enqueue_all(list: [A]) {
    for (a of list) {
      Queue.enqueue(a)
    }
  }

  handler unbounded() {
    values := []
    waiters := []
    is_shutdown := false

    return {
      enqueue(a) {
        if (is_shutdown) return resume(false)

        match waiters {
          [] -> values ++ [a],
          [head, ...tail] -> {
            waiters = tail 
            head(a)
          },
        }

        resume(true)
      },
  
      dequeue() {
        if (is_shutdown) return resume(None)

        match values {
          [] -> waiters ++ [resume],
          [head, ...tail] -> {
            values = tail

            resume(Some(head))
          }
        }
      },

      is_shutdown() {
        resume(is_shutdown)
      },

      shutdown() {
        if is_shutdown { return resume(false) }

        // Let all of the waiters shutdown
        for waiter of waiters {
          waiter(None)
        }

        values = []
        waiters = []
        
        resume(is_shutdown = true)
      }
    }
  }
}

alias IntQueue = Queue<Int>

fun worker() {
  while(Some(value) = IntQueue.dequeue()) {
    Console.log(`Received ${value}`)
  }
}

fun main() {
  // All functions can be called with the fork() syntax
  // to construct a fiber 
  fiber = worker.fork()

  Queue.enqueue_all([1, 2, 3])
  Queue.shutdown()

  // Fiber's can be re-joined into its parent
  fiber.join()
}

// Construct handlers using ++ to "merge" 
// 2 handlers into 1 which can be passed around.
handlers = Queue.unbounded() ++ Console.Platform

// Handlers are provided to functions using "with"
main() with handlers