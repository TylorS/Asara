// Effects can utilize generics, and can utilize
// a struct-like definition of multiple related
// functions that should be provided together.
effect State<A> {
  get() -> A
  modify<B>(A -> (B, A)) -> B
}

impl<A> for State<A> {
  fun get_and_update(f: A -> A) -> A {
    // Implicit returns
    State.modify((a) -> (a, f(a)))
  }

  handler local(initial: A) {
    // Mutable variables uses :=
    current := initial

    return {
      get() { current },
      modify(f) {
        (b, a) = f(current)
        current = a
        b
      }
    }
  }
}

fun main() {
  // Variables are always constant
  a = State.get_and_update((a) -> a * 3)
  b = State.get()

  // Tuples
  return (a, b)
}

// Destructuring
(a, b) = main() with State.local(10)

assert_equal(a, 10)
assert_equal(b, 30)
